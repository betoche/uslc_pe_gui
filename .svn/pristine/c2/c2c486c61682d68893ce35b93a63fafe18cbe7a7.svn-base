package com.uslc.po.gui.master.catalog;

import java.text.SimpleDateFormat;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import com.ibm.icu.util.Calendar;
import com.uslc.po.gui.master.MasterCenterComposite;
import com.uslc.po.gui.master.NewPurchaseOrderComposite;
import com.uslc.po.gui.master.POMaster;
import com.uslc.po.gui.master.interfaces.MasterCompositeInterface;
import com.uslc.po.gui.util.MyGridData;
import com.uslc.po.jpa.entity.User;
import com.uslc.po.jpa.logic.UserRepo;
import com.uslc.po.jpa.logic.UserType;
import com.uslc.po.jpa.util.Constants;
import com.uslc.po.jpa.util.Encryptor;
import com.uslc.po.jpa.util.UslcJpa;

public class UserManagerComposite extends FormCenterMaster implements MasterCompositeInterface {
	private Logger log = null;
	private final String infoAddText = "Info: Add a new user";
	
	private Label titleLbl = null;
	private Table usersTbl = null;
	private Label infoLbl = null;
	private Label firstNameLbl = null;
	private Text firstNameTxt = null;
	private Label lastNameLbl = null;
	private Text lastNameTxt = null;
	private Label userNameLbl = null;
	private Text userNameTxt = null;
	private Label passwordLbl = null;
	private Text passwordTxt = null;
	private Label timestampLbl = null;
	private Text timestampTxt = null;
	private Label userTypeLbl = null;
	private Combo userTypeCbx = null;
	private Label enabledLbl = null;
	private Button enabledBtn = null;
	private Button actionBtn = null;
	private Button cancelBtn = null;
	
	private GridData valuesGd = null;
	private boolean editing = false;
	private User selectedUser = null;
	private SimpleDateFormat sdf = null;
	
	public UserManagerComposite( MasterCenterComposite composite ){
		super( composite, SWT.NONE );
		initComposite();
	}
	
	private void initComposite(){
		FormData data = new FormData( 470, 350);
		setLayoutData(data);
		
		setLayout( new GridLayout( 4, false ) );
		
		getTitleLbl();
		getUsersTbl();
		getInfoLbl();
		getFirstNameLbl();
		getFirstNameTxt();
		getLastNameLbl();
		getLastNameTxt();
		getUserNameLbl();
		getUserNameTxt();
		getPasswordLbl();
		getPasswordTxt();
		getTimestampLbl();
		getTimestampTxt();
		getUserTypeLbl();
		getUserTypeCbx();
		getEnabledLbl();
		getEnabledBtn();
		getActionBtn();
		getCancelBtn();
		
		loadValues();
	}
	
	public Label getTitleLbl() {
		if( titleLbl == null ){
			titleLbl = new Label(this, SWT.NONE);
			titleLbl.setText( "users" );
			
			GridData gd = new GridData( GridData.FILL_HORIZONTAL );
			gd.horizontalSpan = 4;
			
			titleLbl.setLayoutData(gd);
			
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.HORIZONTAL);
			horizontalLine.setLayoutData(gd);
		}
		return titleLbl;
	}
	public Table getUsersTbl() {
		if( usersTbl == null ){
			usersTbl = new Table(this, SWT.SINGLE);
			
			TableColumn id = new TableColumn(usersTbl, SWT.NONE);
			TableColumn userName = new TableColumn(usersTbl, SWT.NONE);
			
			id.setText( "id" );
			userName.setText( "name" );
			
			id.setWidth(30);
			userName.setWidth(100);
			
			usersTbl.setHeaderVisible(true);
			
			GridData gd = new GridData( GridData.FILL_VERTICAL );
			gd.grabExcessVerticalSpace = true;
			gd.verticalSpan = 9;
			usersTbl.setLayoutData( gd );
			
			usersTbl.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseDoubleClick(MouseEvent arg0) {
					setEditMode();
				}
			});
			
			Label verticalLine = new Label( this, SWT.SEPARATOR | SWT.VERTICAL );
			GridData data1 = new GridData(GridData.FILL_VERTICAL);
			data1.verticalSpan = 9;
			data1.widthHint = 15;
			verticalLine.setLayoutData(data1);
		}
		return usersTbl;
	}
	private void setEditMode(){
		TableItem[] items = getUsersTbl().getSelection();
		User user = null;
		
		for (TableItem tableItem : items) {
			user = (User)tableItem.getData();
		}
		
		if( user!=null ){
			editing = true;
			selectedUser = user;
			getInfoLbl().setText("USER["+user.getUsername()+"] - UPDATE");
			getInfoLbl().setAlignment( SWT.RIGHT );
			getEnabledBtn().setSelection(user.isEnabled());
			getFirstNameTxt().setText(user.getFirstName());
			getLastNameTxt().setText(user.getLastName());
			getPasswordTxt().setText(new Encryptor("").decrypt(user.getPassword()));
			getTimestampTxt().setText(getSdf().format( user.getTimestamp() ));
			for( int i = 0 ; i < getUserTypeCbx().getItemCount() ; i++ ){
				if( ((UserType)getUserTypeCbx().getData(getUserTypeCbx().getItem(i))).getId()==user.getUserType() ){
					getUserTypeCbx().select(i);
					break;
				}
			}
			getUserNameTxt().setText(user.getUsername());
			getActionBtn().setText("update");
		}else{
			editing = false;
			clean();
		}
	}
	public Label getInfoLbl() {
		if( infoLbl == null ){
			infoLbl = new Label(this, SWT.NONE);
			infoLbl.setText( infoAddText );
			infoLbl.setLayoutData(MyGridData.getDgHorizontalDoubleSpan());
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.HORIZONTAL );
			horizontalLine.setLayoutData( MyGridData.getDgHorizontalDoubleSpan() );
		}
		return infoLbl;
	}
	public Label getFirstNameLbl() {
		if( firstNameLbl == null ){
			firstNameLbl = new Label( this, SWT.NONE);
			firstNameLbl.setText( "first name:" );
		}
		return firstNameLbl;
	}
	public Text getFirstNameTxt() {
		if( firstNameTxt == null ){
			firstNameTxt = new Text(this, SWT.NONE);
			firstNameTxt.setLayoutData(getValuesGd());
		}
		return firstNameTxt;
	}
	public Label getLastNameLbl() {
		if( lastNameLbl == null ){
			lastNameLbl = new Label(this, SWT.NONE);
			lastNameLbl.setText( "last name" );
		}
		return lastNameLbl;
	}
	public Text getLastNameTxt() {
		if( lastNameTxt == null ){
			lastNameTxt = new Text(this, SWT.NONE);
			lastNameTxt.setLayoutData(getValuesGd());
		}
		return lastNameTxt;
	}
	public Label getUserNameLbl() {
		if( userNameLbl == null ){
			userNameLbl = new Label(this, SWT.NONE);
			userNameLbl.setText("username:");
		}
		return userNameLbl;
	}
	public Text getUserNameTxt() {
		if( userNameTxt == null ){
			userNameTxt = new Text(this, SWT.NONE);
			userNameTxt.setLayoutData(getValuesGd());
		}
		return userNameTxt;
	}
	public Label getPasswordLbl() {
		if( passwordLbl == null ){
			passwordLbl = new Label(this, SWT.NONE);
			passwordLbl.setText("password:");
		}
		return passwordLbl;
	}
	public Text getPasswordTxt() {
		if( passwordTxt == null ){
			passwordTxt = new Text(this, SWT.NONE | SWT.PASSWORD );
			passwordTxt.setLayoutData(getValuesGd());
		}
		return passwordTxt;
	}
	public Label getTimestampLbl() {
		if( timestampLbl == null ){
			timestampLbl = new Label(this, SWT.NONE);
			timestampLbl.setText("timestamp:");
		}
		return timestampLbl;
	}
	public Text getTimestampTxt() {
		if( timestampTxt == null ){
			timestampTxt = new Text(this, SWT.READ_ONLY);
			timestampTxt.setLayoutData(getValuesGd());
		}
		return timestampTxt;
	}
	public Label getUserTypeLbl() {
		if( userTypeLbl == null ){
			userTypeLbl = new Label(this, SWT.NONE);
			userTypeLbl.setText( "type:" );
		}
		return userTypeLbl;
	}
	public Combo getUserTypeCbx() {
		if( userTypeCbx == null ){
			userTypeCbx = new Combo(this, SWT.DROP_DOWN | SWT.READ_ONLY );
			userTypeCbx.setLayoutData(getValuesGd());
			
			for( UserType ut : UserType.values() ){
				userTypeCbx.add( ut.toString() );
				userTypeCbx.setData( ut.toString(), ut );
			}
		}
		return userTypeCbx;
	}
	public Label getEnabledLbl() {
		if( enabledLbl == null ){
			enabledLbl = new Label(this, SWT.NONE);
			enabledLbl.setText( "enabled:" );
		}
		return enabledLbl;
	}
	public Button getEnabledBtn() {
		if( enabledBtn == null ){
			enabledBtn = new Button(this, SWT.CHECK);
			
			GridData gd = new GridData( GridData.FILL_HORIZONTAL );
			gd.horizontalSpan = 4;
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.HORIZONTAL );
			horizontalLine.setLayoutData( gd );
		}
		return enabledBtn;
	}
	public Button getActionBtn() {
		if( actionBtn == null ){
			actionBtn = new Button(this, SWT.PUSH);
			actionBtn.setText("add");
			actionBtn.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					try {
						performAction();
					} catch (Exception e1) {
						
						getLog().error( "error", e1);
					}
				}
			});
			
			GridData gd = new GridData(SWT.CENTER, SWT.CENTER, true, false);
			gd.grabExcessHorizontalSpace=true;
			gd.widthHint=70;
			gd.horizontalSpan = 2;
			
			actionBtn.setLayoutData(gd);
		}
		return actionBtn;
	}
	private void performAction() throws Exception {
		User user = null;
		
		String firstName = getFirstNameTxt().getText();
		String lastName = getLastNameTxt().getText();
		String username = getUserNameTxt().getText().trim();
		String password = new Encryptor("").encrypt( getPasswordTxt().getText().trim() );
		int ut = ((UserType)getUserTypeCbx().getData(getUserTypeCbx().getItem( getUserTypeCbx().getSelectionIndex() ))).getId();
		boolean active = false;
		boolean enabled = getEnabledBtn().getSelection();
		
		if( editing ){
			user = selectedUser;
		}else{
			user = new User();
			user.setActive(active);
			user.setTimestamp(Calendar.getInstance().getTime());
		}
		user.setEnabled(enabled);
		user.setFirstName(firstName);
		user.setLastName(lastName);
		user.setPassword(password);
		user.setUserType(ut);
		user.setUsername(username);
		
		int style = SWT.ICON_INFORMATION;
		MessageBox diag = new MessageBox(this.getShell(), style );
		diag.setText( Constants.MESSAGE_BOX_DIAG_TITLE.toString() );
		String errorMsg = "there was a problem adding the user";
		String successMsg = "user added/modified correctly.";
		
		UslcJpa jpa = new UslcJpa();
		if( jpa.persist(user) ){
			diag.setMessage(successMsg);
			clean();
			loadValues();
		}else{
			style = SWT.ICON_ERROR;
			diag.setMessage(errorMsg);
		}
		
		diag.open();
	}

	public Button getCancelBtn() {
		if( cancelBtn == null ){
			cancelBtn = new Button(this, SWT.PUSH);
			cancelBtn.setText( "cancel" );
			
			cancelBtn.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					if( editing ){
						clean();
					}else{
						hide();
					}
				}
			});
			
			GridData gd = new GridData(SWT.CENTER, SWT.CENTER, true, false);
			gd.grabExcessHorizontalSpace=true;
			gd.horizontalAlignment = GridData.HORIZONTAL_ALIGN_CENTER;
			gd.widthHint=70;
			gd.horizontalSpan = 2;
			
			cancelBtn.setLayoutData(gd);
		}
		return cancelBtn;
	}

	public void hide(){
		clean();
		this.setParent( getParent().getMaster().getHiddenShell() );
		this.setVisible(false);
	}
	private void clean(){
		editing = false;
		selectedUser = null;
		getInfoLbl().setText(infoAddText);
		getInfoLbl().setAlignment( SWT.LEFT );
		getEnabledBtn().setSelection(false);
		getFirstNameTxt().setText("");
		getLastNameTxt().setText("");
		getPasswordTxt().setText("");
		getTimestampTxt().setText( getSdf().format(Calendar.getInstance().getTime()) );
		getUserTypeCbx().select(-1);
		getUserNameTxt().setText("");
		getActionBtn().setText("add");
		
	}
	private Logger getLog(){
		if( log == null ){
			log = Logger.getLogger(NewPurchaseOrderComposite.class);
			PropertyConfigurator.configure("log4j.properties");
		}
		return log;
	}

	public GridData getValuesGd(){
		if( valuesGd == null ){
			valuesGd = new GridData( GridData.FILL_HORIZONTAL );
			valuesGd.grabExcessHorizontalSpace = true;
		}
		return valuesGd;
	}

	public void loadValues(){
		getUsersTbl().removeAll();
		List<User> users = UserRepo.findAll();
		
		for (User user : users ) {
			TableItem item = new TableItem(getUsersTbl(), SWT.NONE);
			if( !user.isEnabled() ){
				item.setBackground(new org.eclipse.swt.graphics.Color(getDisplay(), 255, 224, 237 ));
			}
			String texts[] = { String.valueOf( user.getId() ), (user.getFirstName() + " " + user.getLastName() ) };
			item.setData(user);
			item.setText( texts );
		}
		getTitleLbl().setText( "users ("+users.size()+")" );
		
		getTimestampTxt().setText( getSdf().format( Calendar.getInstance().getTime() ) );
	}

	public SimpleDateFormat getSdf(){
		if( sdf == null ){
			sdf = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
		}
		return sdf;
	}

	@Override
	public POMaster getMaster() {
		return getParent().getMaster();
	}

	@Override
	public InfoForm getInfoForm() {
		String title = "";
		String desc = "";
		String[] features = {};
		return new InfoForm(title, desc, features);
	}
}
