package com.uslc.po.gui.master.catalog;

import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import com.uslc.po.gui.master.MasterCenterComposite;
import com.uslc.po.gui.util.MyGridData;
import com.uslc.po.jpa.entity.Size;
import com.uslc.po.jpa.logic.SizeRepo;
import com.uslc.po.jpa.util.Constants;
import com.uslc.po.jpa.util.UslcJpa;

public class SizeManagerComposite extends Composite {
	private MasterCenterComposite parent = null;
	private Label title = null;
	private Table sizes = null;
	private Label info = null;
	private Label waistLabel = null;
	private Text waistText = null;
	private Label hipLabel = null;
	private Text hipText = null;
	private Label inseamLabel = null;
	private Text inseamText = null;
	private Button action = null;
	private Button cancel = null;
	private GridData labelGd = null;
	private GridData textGd = null;
	
	private Logger log = null;

	private Size selectedSize = null;
	private boolean editing = false;
	private final String infoAddText = "Info: Add a new Size";
	
	public SizeManagerComposite( MasterCenterComposite composite ) {
		super( composite.getMaster().getHiddenShell(), SWT.NONE );
		this.parent = composite;
		initComposite();
	}
	
	private void initComposite(){
		GridLayout layout = new GridLayout( 4, false );
		setLayout(layout);
		
		/*GridData data = new GridData();
		data.heightHint = 300;
		data.widthHint = 400;*/
		FormData data = new FormData( 400, 300 );
		setLayoutData(data);
		
		getTitle();
		getSizes();
		getInfo();
		getWaistLabel();
		getWaistText();
		getHipLabel();
		getHipText();
		getInseamLabel();
		getInseamText();
		getAction();
		getCancel();
	}
	
	public MasterCenterComposite getParent() {
		return parent;
	}
	public Label getTitle() {
		if( title == null ){
			title = new Label( this, SWT.NONE );
			title.setText( "Sizes" );
			title.setAlignment(SWT.LEFT);
			
			GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
			data.horizontalSpan=4;
			title.setLayoutData(data);
			
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.HORIZONTAL );
			GridData data2 = new GridData(SWT.FILL, SWT.FILL, true, false);
			data2.horizontalSpan=4;
			horizontalLine.setLayoutData(data2);
		}
		return title;
	}
	public Table getSizes() {
		if( sizes == null ){
			sizes = new Table( this, SWT.SINGLE );
			
			TableColumn id = new TableColumn(sizes, SWT.NONE);
			id.setText("id");
			TableColumn size = new TableColumn(sizes, SWT.NONE);
			size.setText( "size" );
			
			id.setWidth(30);
			size.setWidth(70);
			sizes.setHeaderVisible(true);
			
			GridData data = new GridData( GridData.FILL_VERTICAL );
			data.verticalSpan=6;
			sizes.setLayoutData(data);
			
			sizes.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseDoubleClick(MouseEvent arg0) {
					setEditMode();
				}
			});
			
			loadSizes();
			
			GridData data1 = new GridData(SWT.FILL, SWT.FILL, false, false);
			data1.verticalSpan=6;
			data1.widthHint=15;
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.VERTICAL );
			horizontalLine.setLayoutData(data1);
		}
		return sizes;
	}
	private void setEditMode(){
		editing = true;
		TableItem[] selection = getSizes().getSelection();
		Size size = null;
		if( selection!=null ){
			for( TableItem item : selection ){
				size = (Size)item.getData();
			}
		}
		if( size!=null ){
			editing = true;
			selectedSize = size;
			getWaistText().setText( String.valueOf( size.getWaist() ) );
			getHipText().setText( String.valueOf( size.getHip() ) );
			getInseamText().setText( String.valueOf( size.getInseam() ) );
			getInfo().setText( "Size["+size.getId()+"] - UPDATE" );
			getInfo().setAlignment( SWT.RIGHT );
			getAction().setText("update");
			getAction().setAlignment(SWT.RIGHT);
		}else{
			editing = false;
			selectedSize = null;
		}
	}
	public Label getInfo() {
		if( info == null ){
			info = new Label(this, SWT.NONE);
			info.setText(infoAddText);
			info.setLayoutData(MyGridData.getDgHorizontalDoubleSpan());
			
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.HORIZONTAL );
			horizontalLine.setLayoutData(MyGridData.getDgHorizontalDoubleSpan());
		}
		return info;
	}
	public Label getWaistLabel() {
		if( waistLabel == null ){
			waistLabel = new Label(this, SWT.NONE);
			waistLabel.setText("waist:");
			waistLabel.setAlignment( SWT.RIGHT );
			waistLabel.setLayoutData(getLabelGd());
		}
		return waistLabel;
	}
	public Text getWaistText() {
		if( waistText == null ){
			waistText = new Text(this, SWT.BORDER);
			waistText.setLayoutData(getTextGd());
		}
		return waistText;
	}
	public Label getHipLabel() {
		if( hipLabel == null ){
			hipLabel = new Label(this, SWT.NONE);
			hipLabel.setText("hip:");
			hipLabel.setAlignment( SWT.RIGHT );
			hipLabel.setLayoutData(labelGd = new GridData( 100, 23 ));
		}
		return hipLabel;
	}
	public Text getHipText() {
		if( hipText == null ){
			hipText = new Text(this, SWT.BORDER);
			hipText.setLayoutData(new GridData(100, 23));
		}
		return hipText;
	}
	public Label getInseamLabel() {
		if( inseamLabel == null ){
			inseamLabel = new Label(this, SWT.NONE);
			inseamLabel.setText("inseam:");
			inseamLabel.setAlignment( SWT.RIGHT );
			inseamLabel.setLayoutData(labelGd = new GridData( 100, 23 ));
		}
		return inseamLabel;
	}
	public Text getInseamText() {
		if( inseamText == null ){
			inseamText = new Text(this, SWT.BORDER);
			inseamText.setLayoutData(new GridData(100, 23));
		}
		return inseamText;
	}
	public Button getAction() {
		if( action == null ){
			action = new Button(this, SWT.PUSH);
			action.setText( "add" );
			GridData gd = new GridData();
			gd.widthHint = 70;
			gd.horizontalAlignment = SWT.RIGHT;
			action.setLayoutData(gd);
			action.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					try {
						performAction();
					} catch (Exception e1) {
						getLog().error( "error", e1);
					}
				}
			});
		}
		return action;
	}
	public Button getCancel() {
		if( cancel == null ){
			cancel = new Button(this, SWT.PUSH);
			cancel.setText( "cancel" );
			GridData gd = new GridData();
			gd.horizontalAlignment = SWT.CENTER;
			gd.widthHint = 70;
			cancel.setLayoutData(gd);
			cancel.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					if( editing ){
						clean();
					}else{
						hide();
					}
				}
			});
			
			GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
			data.horizontalSpan = 4;
			Label horizontalLine = new Label(this, SWT.SEPARATOR | SWT.HORIZONTAL );
			horizontalLine.setLayoutData(data);
		}
		return cancel;
	}

	private void loadSizes(){
		List<Size> sizes = SizeRepo.findAll();
		getSizes().removeAll();
		for (Size size : sizes) {
			TableItem item = new TableItem(getSizes(), SWT.NONE);
			String[] texts = { String.valueOf( size.getId() ), size.getWaist() + " x " + size.getInseam() };
			item.setData(size);
			item.setText( texts );
		}
	}
	private GridData getLabelGd(){
		if( labelGd == null ){
			labelGd = new GridData( 100, 23 );
		}
		return labelGd;
	}
	private GridData getTextGd(){
		if( textGd == null ){
			textGd = new GridData(100, 23);
		}
		return textGd;
	}
	
	private void performAction() throws Exception{
		Size size = null;
		int waist = Integer.parseInt( getWaistText().getText() );
		int hip = Integer.parseInt( getHipText().getText() );
		int inseam = Integer.parseInt( getInseamText().getText() );
		String successMsg = "";
		String errorMsg = "";
		
		if( editing ) {
			size = selectedSize;
			successMsg = "Size updated correctly.";
			errorMsg = "There was a problem while updating the size.";
		} else {
			size = new Size();
			successMsg = "Size added correctly.";
			errorMsg = "There was a problem adding the size.";
		}
		
		size.setWaist(waist);
		size.setHip(hip);
		size.setInseam(inseam);
		
		UslcJpa jpa = new UslcJpa();
		int style = SWT.ICON_INFORMATION;
		MessageBox diag = new MessageBox(this.getShell(), style );
		diag.setText( Constants.MESSAGE_BOX_DIAG_TITLE.toString() );
		if( jpa.persist(size) ){
			diag.setMessage(successMsg);
			clean();
			loadSizes();
		}else{
			style = SWT.ICON_ERROR;
			diag.setMessage(errorMsg);
		}
		diag.open();
	}
	private void clean(){
		editing = false;
		getInfo().setText(infoAddText);
		getInfo().setAlignment( SWT.LEFT );
		getWaistText().setText("");
		getHipText().setText("");
		getInseamText().setText("");
		getAction().setText("add");
	}
	public void hide(){
		clean();
		this.setParent( getParent().getMaster().getHiddenShell() );
		this.setVisible(false);
	}
	
	private Logger getLog(){
		if( log == null ){
			log = Logger.getLogger( SizeManagerComposite.class );
			PropertyConfigurator.configure("log4j.properties");
		}
		return log;
	}
	
	/**
	 * Create the composite.
	 * @param parent
	 * @param style
	 */
	public SizeManagerComposite(Composite parent, int style) {
		super(parent, style);
		
		initComposite();
	}
	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
}